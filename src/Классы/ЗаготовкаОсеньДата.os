#Использовать entity
#Использовать fluent

Перем НастройкиИсточниковДанныхВходящие;

Функция ИнициализироватьИсточникиДанных()

	ИсточникиДанных = Новый Массив;

	РазрешенИсточникБезИмени = Ложь;
	Если ТипЗнч(НастройкиИсточниковДанныхВходящие) = Тип("Соответствие") Тогда
		НастройкиИсточниковДанных = Новый Массив();
		РазрешенИсточникБезИмени = Истина;
		НастройкиИсточниковДанных.Добавить(НастройкиИсточниковДанныхВходящие);
	ИначеЕсли ТипЗнч(НастройкиИсточниковДанныхВходящие) = Тип("Массив") Тогда
		НастройкиИсточниковДанных = НастройкиИсточниковДанныхВходящие;
	Иначе
		Возврат ИсточникиДанных;
	КонецЕсли;

	сч = 0;
	Для Каждого НастройкаИсточникаДанных Из НастройкиИсточниковДанных Цикл
		ИмяИсточника = НастройкаИсточникаДанных.Получить("Имя");
		Если ИмяИсточника = Неопределено И НЕ РазрешенИсточникБезИмени Тогда
			ВызватьИсключение "Не указано <Имя> источника данных #" + сч;
		КонецЕсли;
		ТипКоннектора = Тип(НастройкаИсточникаДанных.Получить("ТипКоннектора"));
		Если ТипКоннектора = Неопределено Тогда
			ВызватьИсключение "Не указан <ТипКоннектора> источника данных #" + сч;
		КонецЕсли;
		СтрокаСоединения = ПолучитьИли(НастройкаИсточникаДанных, "СтрокаСоединения", "");
		ПараметрыКоннектора = ПолучитьИли(НастройкаИсточникаДанных, "ПараметрыКоннектора", Новый Массив);

		ИсточникДанных = Новый ИсточникДанных(ИмяИсточника, ТипКоннектора, СтрокаСоединения, ПараметрыКоннектора);
		ИсточникиДанных.Добавить(ИсточникДанных);

		сч = сч + 1;
	КонецЦикла;

	Возврат ИсточникиДанных;

КонецФункции

Функция ПолучитьИли(Соответствие, Ключ, ЗначениеПоУмолчанию)
	Значение = Соответствие.Получить(Ключ);
	Если Значение = Неопределено Тогда
		Значение = ЗначениеПоУмолчанию;
	КонецЕсли;

	Возврат Значение;
КонецФункции

Процедура ПриИнициализацииПоделки(Поделка) Экспорт

	ИсточникиДанных = ИнициализироватьИсточникиДанных();
	ТипыСущностей = ПроцессорыКоллекций.ИзКоллекции(
			Новый Рефлектор().ИзвестныеТипы(Новый Структура("Пользовательский", Истина))
		)
		.Обработать("Строка -> Строка.Значение")
		.Фильтровать("Тип -> 
			|	Методы = Новый Рефлектор().ПолучитьТаблицуМетодов(Тип);
			|	Возврат РаботаСАннотациями.НайтиМетодыСАннотацией(Методы, ""Сущность"").Количество() > 0;")
		.ВМассив();
	
	Верховный = Истина;

	Для Каждого ИсточникДанных Из ИсточникиДанных Цикл

		АннотацияВерховный = ?(Верховный, "&Верховный ", "");
		
		// BSLLS:LineLength-off
		// BSLLS:NestedFunctionInParameters-off
		Поделка.ДобавитьЗавязь(
			АннотацияВерховный + "
			|&Завязь(Тип = ""ИсточникДанных"", Значение = ""ИсточникДанных" + ИсточникДанных.Имя() + """)
			|&Прозвище(""ИсточникДанных"")
			|() -> Возврат ИсточникДанных", 
			Новый Структура("ИсточникДанных", ИсточникДанных)
		);

		Поделка.ДобавитьЗавязь(
			АннотацияВерховный + "
			|&Завязь(Тип = ""МенеджерСущностей"", Значение = ""МенеджерСущностей" + ИсточникДанных.Имя() + """)
			|&Прозвище(""МенеджерСущностей"")
			|(&Пластилин(""ТипыСущностей" + ИсточникДанных.Имя() + """) ТипыСущностей) ->
			|	МенеджерСущностей = Новый МенеджерСущностей(
			|		ИсточникДанных.ТипКоннектора(),
			|		ИсточникДанных.СтрокаСоединения(),
			|		ИсточникДанных.ПараметрыКоннектора()
			|	);
			|
			|	Для Каждого ТипСущности Из ТипыСущностей Цикл
			|		МенеджерСущностей.ДобавитьКлассВМодель(ТипСущности);
			|	КонецЦикла;
			|
			|	МенеджерСущностей.Инициализировать();
			|
			|	Возврат МенеджерСущностей", 
			Новый Структура("ИсточникДанных", ИсточникДанных)
		);

		Верховный = Ложь;

		ТипыСущностейДляИсточника = Новый Массив;
		Для Каждого ТипСущности Из ТипыСущностей Цикл

			Если ТипСущности = Тип("СлужебнаяСущность_ЭлементКоллекцииКлючЗначение") Тогда
				Продолжить;
			КонецЕсли;

			ВременнаяМодельДанных = Новый МодельДанных();
			ОбъектМодели = ВременнаяМодельДанных.СоздатьОбъектМодели(ТипСущности);

			СущностьПоддерживаетсяИсточникомДанных = ОбъектМодели.ИсточникиДанных().Количество() = 0 
				ИЛИ ОбъектМодели.ИсточникиДанных().Найти(ИсточникДанных.Имя()) <> Неопределено;
			
			Если НЕ СущностьПоддерживаетсяИсточникомДанных Тогда
				Продолжить;
			КонецЕсли;

			ТипыСущностейДляИсточника.Добавить(ТипСущности);

			ИмяСущности = Строка(ТипСущности);
			ИмяХранилищаСущности = "ХранилищеСущностей" + ИсточникДанных.Имя() + ИмяСущности;
			ИмяМенеджераСущности = "МенеджерСущностей" + ИсточникДанных.Имя();

			// TODO: Возможно имеет смысл добавить второе прозвище ХранилищеСущностей + ИсточникДанных.Имя()
			Поделка.ДобавитьЗавязь(
				"&Завязь(Тип = ""ХранилищеСущностей"", Значение = """ + ИмяХранилищаСущности + """)
				|&Прозвище(""ХранилищеСущностей"")
				|(&Пластилин(""" + ИмяМенеджераСущности + """) МенеджерСущности) ->
				|	Возврат МенеджерСущности.ПолучитьХранилищеСущностей(ТипСущности)", 
				Новый Структура("ТипСущности", ТипСущности)
			);
		КонецЦикла;

		// TODO: Это может быть обычным дубом
		Поделка.ДобавитьЗавязь(
			"&Завязь(Тип = ""Массив"", Значение = ""ТипыСущностей" + ИсточникДанных.Имя() + """)
			|() ->
			|	Возврат ТипыСущностейДляИсточника", 
			Новый Структура("ТипыСущностейДляИсточника", ТипыСущностейДляИсточника)
		);

		// BSLLS:LineLength-on
		// BSLLS:NestedFunctionInParameters-on
	КонецЦикла;

КонецПроцедуры

&Заготовка
Процедура ПриСозданииОбъекта(&Деталька("data.ИсточникиДанных") НастройкиИсточниковДанных) Экспорт
	НастройкиИсточниковДанныхВходящие = НастройкиИсточниковДанных;
КонецПроцедуры
