// BSLLS:UsingHardcodeNetworkAddress-off
#Использовать ".."
#Использовать autumn

&Тест
Процедура КогдаНеЗаданыНастройкиПодключения_ТогдаИсточникиДанныхНеОпределены() Экспорт

	// Дано
	Поделка = Новый Поделка;
	Поделка.ЗапуститьПриложение();
	
	// Когда
	ИсточникиДанных = Поделка.НайтиЖелудь("ИсточникиДанных");
	
	// Тогда
	Ожидаем.Что(ИсточникиДанных).Равно(Неопределено);
	
КонецПроцедуры

&Тест
Процедура КогдаЗаполненыИсточникиДанныхКакСоответствие_ТогдаВозвращаетсяОдинИсточникДанных() Экспорт

	// Дано
	СоветДругогоМастера = СоветДругогоМастераСОднимКоннекторомКакСоответствие();

	Поделка = Новый Поделка(СоветДругогоМастера);
	Поделка.ЗапуститьПриложение();

	// Когда
	ИсточникиДанных = Поделка.НайтиЖелудь("ИсточникиДанных");

	// Тогда
	Ожидаем.Что(ИсточникиДанных.Количество()).Равно(1);
	Ожидаем.Что(ИсточникиДанных[0]).ИмеетТип("ИсточникДанных");
	Ожидаем.Что(ИсточникиДанных[0].Имя()).Равно("Основной");
	Ожидаем.Что(ИсточникиДанных[0].ТипКоннектора()).Равно(Тип("КоннекторInMemory"));
	Ожидаем.Что(ИсточникиДанных[0].СтрокаСоединения()).Равно("");
	Ожидаем.Что(ИсточникиДанных[0].ПараметрыКоннектора().Количество()).Равно(0);

КонецПроцедуры

&Тест
Процедура КогдаЗаполненыИсточникиДанныхКакСоответствие_ТогдаВозвращаетсяВерховныйИсточникДанных() Экспорт

	// Дано
	СоветДругогоМастера = СоветДругогоМастераСОднимКоннекторомКакСоответствие();

	Поделка = Новый Поделка(СоветДругогоМастера);
	Поделка.ЗапуститьПриложение();

	// Когда
	ИсточникДанных = Поделка.НайтиЖелудь("ИсточникДанных");

	// Тогда
	Ожидаем.Что(ИсточникДанных).ИмеетТип("ИсточникДанных");
	Ожидаем.Что(ИсточникДанных.Имя()).Равно("Основной");
	Ожидаем.Что(ИсточникДанных.ТипКоннектора()).Равно(Тип("КоннекторInMemory"));
	Ожидаем.Что(ИсточникДанных.СтрокаСоединения()).Равно("");
	Ожидаем.Что(ИсточникДанных.ПараметрыКоннектора().Количество()).Равно(0);

КонецПроцедуры

&Тест
Процедура КогдаЗаполненыИсточникиДанныхКакСоответствие_ТогдаВозвращаетсяОдинМенеджерСущностей() Экспорт

	// Дано
	СоветДругогоМастера = СоветДругогоМастераСОднимКоннекторомКакСоответствие();

	Поделка = Новый Поделка(СоветДругогоМастера);
	Поделка.ЗапуститьПриложение();

	// Когда
	МенеджерыСущностей = Поделка.НайтиЖелудь("МенеджерыСущностей");

	// Тогда
	Ожидаем.Что(МенеджерыСущностей.Количество()).Равно(1);
	Ожидаем.Что(МенеджерыСущностей[0]).ИмеетТип("МенеджерСущностей");
	Ожидаем.Что(МенеджерыСущностей[0].ПолучитьКоннектор()).ИмеетТип("КоннекторInMemory");

КонецПроцедуры

&Тест
Процедура КогдаЗаполненыИсточникиДанныхКакСоответствие_ТогдаВозвращаетсяВерховныйМенеджерСущностей() Экспорт

	// Дано
	СоветДругогоМастера = СоветДругогоМастераСОднимКоннекторомКакСоответствие();

	Поделка = Новый Поделка(СоветДругогоМастера);
	Поделка.ЗапуститьПриложение();

	// Когда
	МенеджерСущностей = Поделка.НайтиЖелудь("МенеджерСущностей");

	// Тогда
	Ожидаем.Что(МенеджерСущностей).ИмеетТип("МенеджерСущностей");
	Ожидаем.Что(МенеджерСущностей.ПолучитьКоннектор()).ИмеетТип("КоннекторInMemory");

КонецПроцедуры

&Тест
Процедура КогдаЗаполненыИсточникиДанныхКакМассив_ТогдаВозвращаетВсеИсточникиДанных() Экспорт

	// Дано
	СоветДругогоМастера = СоветДругогоМастераСДвумяКоннекторамиКакМассив();

	Поделка = Новый Поделка(СоветДругогоМастера);
	Поделка.ЗапуститьПриложение();

	// Когда
	ИсточникиДанных = Поделка.НайтиЖелудь("ИсточникиДанных");

	// Тогда
	Ожидаем.Что(ИсточникиДанных.Количество()).Равно(2);

	Ожидаем.Что(ИсточникиДанных[0]).ИмеетТип("ИсточникДанных");
	Ожидаем.Что(ИсточникиДанных[0].Имя()).Равно("Основной");
	Ожидаем.Что(ИсточникиДанных[0].ТипКоннектора()).Равно(Тип("КоннекторInMemory"));
	Ожидаем.Что(ИсточникиДанных[0].СтрокаСоединения()).Равно("");
	Ожидаем.Что(ИсточникиДанных[0].ПараметрыКоннектора().Количество()).Равно(0);

	Ожидаем.Что(ИсточникиДанных[1]).ИмеетТип("ИсточникДанных");
	Ожидаем.Что(ИсточникиДанных[1].Имя()).Равно("Дополнительный");
	Ожидаем.Что(ИсточникиДанных[1].ТипКоннектора()).Равно(Тип("КоннекторSQLite"));
	Ожидаем.Что(ИсточникиДанных[1].СтрокаСоединения()).Равно("FullUri=file::memory:?cache=shared");
	Ожидаем.Что(ИсточникиДанных[1].ПараметрыКоннектора().Количество()).Равно(0);

КонецПроцедуры

&Тест
Процедура КогдаЗаполненыИсточникиДанныхКакМассив_ТогдаВозвращаетВерховныйИсточникДанных() Экспорт

	// Дано
	СоветДругогоМастера = СоветДругогоМастераСДвумяКоннекторамиКакМассив();

	Поделка = Новый Поделка(СоветДругогоМастера);
	Поделка.ЗапуститьПриложение();

	// Когда
	ИсточникДанных = Поделка.НайтиЖелудь("ИсточникДанных");

	// Тогда
	Ожидаем.Что(ИсточникДанных).ИмеетТип("ИсточникДанных");
	Ожидаем.Что(ИсточникДанных.Имя()).Равно("Основной");
	Ожидаем.Что(ИсточникДанных.ТипКоннектора()).Равно(Тип("КоннекторInMemory"));
	Ожидаем.Что(ИсточникДанных.СтрокаСоединения()).Равно("");
	Ожидаем.Что(ИсточникДанных.ПараметрыКоннектора().Количество()).Равно(0);

КонецПроцедуры

&Тест
Процедура КогдаЗаполненыИсточникиДанныхКакМассив_ТогдаВозвращаетВсеМенеджерыСущностей() Экспорт

	// Дано
	СоветДругогоМастера = СоветДругогоМастераСДвумяКоннекторамиКакМассив();

	Поделка = Новый Поделка(СоветДругогоМастера);
	Поделка.ЗапуститьПриложение();

	// Когда
	МенеджерыСущностей = Поделка.НайтиЖелудь("МенеджерыСущностей");

	// Тогда
	Ожидаем.Что(МенеджерыСущностей.Количество()).Равно(2);

	Ожидаем.Что(МенеджерыСущностей[0]).ИмеетТип("МенеджерСущностей");
	Ожидаем.Что(МенеджерыСущностей[0].ПолучитьКоннектор()).ИмеетТип("КоннекторInMemory");

	Ожидаем.Что(МенеджерыСущностей[1]).ИмеетТип("МенеджерСущностей");
	Ожидаем.Что(МенеджерыСущностей[1].ПолучитьКоннектор()).ИмеетТип("КоннекторSQLite");

КонецПроцедуры

&Тест
Процедура КогдаЗаполненыИсточникиДанныхКакМассив_ТогдаВозвращаетВерховныйМенеджерСущностей() Экспорт

	// Дано
	СоветДругогоМастера = СоветДругогоМастераСДвумяКоннекторамиКакМассив();

	Поделка = Новый Поделка(СоветДругогоМастера);
	Поделка.ЗапуститьПриложение();

	// Когда
	МенеджерСущностей = Поделка.НайтиЖелудь("МенеджерСущностей");

	// Тогда
	Ожидаем.Что(МенеджерСущностей).ИмеетТип("МенеджерСущностей");
	Ожидаем.Что(МенеджерСущностей.ПолучитьКоннектор()).ИмеетТип("КоннекторInMemory");

КонецПроцедуры

Функция СоветДругогоМастераСОднимКоннекторомКакСоответствие()

	Детальки = Новый Соответствие();

	СекцияData = Новый Соответствие();
	Детальки.Вставить("data", СекцияData);

	ИсточникиДанных = Новый Соответствие();
	СекцияData.Вставить("ИсточникиДанных", ИсточникиДанных);

	ИсточникиДанных.Вставить("Имя", "Основной");
	ИсточникиДанных.Вставить("ТипКоннектора", "КоннекторInMemory");

	СоветДругогоМастера = Новый СоветДругогоМастера();
	СоветДругогоМастера.ЗначенияДеталек(Детальки);

	Возврат СоветДругогоМастера;

КонецФункции

Функция СоветДругогоМастераСДвумяКоннекторамиКакМассив()

	Детальки = Новый Соответствие();

	СекцияData = Новый Соответствие();
	Детальки.Вставить("data", СекцияData);

	ИсточникиДанных = Новый Массив();
	СекцияData.Вставить("ИсточникиДанных", ИсточникиДанных);

	ИсточникДанных = Новый Соответствие();	
	ИсточникДанных.Вставить("Имя", "Основной");
	ИсточникДанных.Вставить("ТипКоннектора", "КоннекторInMemory");
	
	ИсточникиДанных.Добавить(ИсточникДанных);

	ИсточникДанных = Новый Соответствие();
	ИсточникДанных.Вставить("Имя", "Дополнительный");
	ИсточникДанных.Вставить("ТипКоннектора", "КоннекторSQLite");
	ИсточникДанных.Вставить("СтрокаСоединения", "FullUri=file::memory:?cache=shared");
	
	ИсточникиДанных.Добавить(ИсточникДанных);
	
	СоветДругогоМастера = Новый СоветДругогоМастера();
	СоветДругогоМастера.ЗначенияДеталек(Детальки);

	Возврат СоветДругогоМастера;

КонецФункции
